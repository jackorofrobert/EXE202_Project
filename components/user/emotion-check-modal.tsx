"use client"

import { useState } from "react"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Slider } from "@/components/ui/slider"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import type { EmotionLevel } from "@/types"

interface EmotionCheckModalProps {
  open: boolean
  onComplete: (level: EmotionLevel, note?: string) => void
}

const EMOTION_LABELS = {
  1: { label: "R·∫•t t·ªá", color: "text-red-600", emoji: "üò¢" },
  2: { label: "T·ªá", color: "text-orange-600", emoji: "üòü" },
  3: { label: "B√¨nh th∆∞·ªùng", color: "text-yellow-600", emoji: "üòê" },
  4: { label: "T·ªët", color: "text-lime-600", emoji: "üôÇ" },
  5: { label: "R·∫•t t·ªët", color: "text-green-600", emoji: "üòä" },
}

export function EmotionCheckModal({ open, onComplete }: EmotionCheckModalProps) {
  const [level, setLevel] = useState<EmotionLevel>(3)
  const [note, setNote] = useState("")

  const handleSubmit = () => {
    onComplete(level, note || undefined)
  }

  const currentEmotion = EMOTION_LABELS[level]

  return (
    <Dialog open={open} onOpenChange={() => {}}>
      <DialogContent className="sm:max-w-md" onInteractOutside={(e) => e.preventDefault()}>
        <DialogHeader>
          <DialogTitle>H√¥m nay b·∫°n c·∫£m th·∫•y th·∫ø n√†o?</DialogTitle>
          <DialogDescription>H√£y chia s·∫ª c·∫£m x√∫c c·ªßa b·∫°n ƒë·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n</DialogDescription>
        </DialogHeader>

        <div className="space-y-6 py-4">
          <div className="space-y-4">
            <div className="text-center">
              <div className="text-6xl mb-2">{currentEmotion.emoji}</div>
              <p className={`text-xl font-semibold ${currentEmotion.color}`}>{currentEmotion.label}</p>
            </div>

            <div className="space-y-2">
              <Label>M·ª©c ƒë·ªô c·∫£m x√∫c (1-5)</Label>
              <Slider
                value={[level]}
                onValueChange={(value) => setLevel(value[0] as EmotionLevel)}
                min={1}
                max={5}
                step={1}
                className="w-full"
              />
              <div className="flex justify-between text-xs text-muted-foreground">
                <span>R·∫•t t·ªá</span>
                <span>R·∫•t t·ªët</span>
              </div>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="note">Ghi ch√∫ (t√πy ch·ªçn)</Label>
            <Textarea
              id="note"
              placeholder="B·∫°n mu·ªën chia s·∫ª g√¨ v·ªÅ c·∫£m x√∫c c·ªßa m√¨nh..."
              value={note}
              onChange={(e) => setNote(e.target.value)}
              rows={3}
            />
          </div>

          <Button onClick={handleSubmit} className="w-full">
            Ti·∫øp t·ª•c
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  )
}
